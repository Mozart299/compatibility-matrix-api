# .github/workflows/python-app.yml
name: Python Application CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest pytest-cov mypy black
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check formatting with black
      run: |
        black --check .
        
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports app
        
    - name: Setup test environment
      run: |
        cp .env.sample .env
        sed -i 's/POSTGRES_SERVER=localhost/POSTGRES_SERVER=localhost/g' .env
        sed -i 's/POSTGRES_USER=postgres/POSTGRES_USER=postgres/g' .env
        sed -i 's/POSTGRES_PASSWORD=your_password/POSTGRES_PASSWORD=postgres/g' .env
        sed -i 's/POSTGRES_DB=compatibility_matrix/POSTGRES_DB=test_db/g' .env
        sed -i 's/JWT_SECRET_KEY=your_jwt_secret_key_here/JWT_SECRET_KEY=testing_secret_key/g' .env
        sed -i 's/JWT_REFRESH_SECRET_KEY=your_refresh_token_secret_key_here/JWT_REFRESH_SECRET_KEY=testing_refresh_key/g' .env
        
    - name: Test with pytest
      run: |
        pytest --cov=app tests/
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and export
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: compatibility-matrix-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max